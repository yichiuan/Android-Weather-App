apply plugin: 'com.android.application'
apply plugin: 'com.getkeepsafe.dexcount'

android {
    compileSdkVersion 27
    buildToolsVersion "27.0.3"

    defaultConfig {
        applicationId "com.yichiuan.weatherapp"
        minSdkVersion 16
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"

        buildConfigField 'String', 'OPENWEATHERMAP_API_KEY', "\"${OpenWeatherMap_Api_Key}\""

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [ eventBusIndex : 'com.yichiuan.weatherapp.EventBusIndex' ]
            }
        }
    }
    signingConfigs {
        releaseConfig
    }
    buildTypes {
        debug {
            minifyEnabled true
            // Uses new built-in shrinker http://tools.android.com/tech-docs/new-build-system/built-in-shrinker
            useProguard false

            applicationIdSuffix '.debug'
            versionNameSuffix '-debug'

            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        staging.initWith(buildTypes.debug)
        staging {
            //使得 Proguard 有作用
            debuggable false
            useProguard true
            applicationIdSuffix '.staging'
            versionNameSuffix '-staging'
        }
        release {
            minifyEnabled true
            //proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //Use Proguard optimization
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.releaseConfig
        }
    }

    flavorDimensions "default"
    // If you need to add more flavors, consider using flavor dimensions.
    productFlavors {
        mock {
            dimension "default"
            applicationIdSuffix = ".mock"
        }
        prod {
            dimension "default"
        }
    }

    // Remove mockRelease as it's not needed.
    android.variantFilter { variant ->
        if(variant.buildType.name.equals('release')
                && variant.getFlavors().get(0).name.equals('mock')) {
            variant.setIgnore(true);
        }
    }

    // Always show the result of every unit test, even if it passes.
    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

def keystorePropertiesFile = rootProject.file("keystore.properties")
if (keystorePropertiesFile.exists()) {
    def keystoreProperties = new Properties()
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

    if (keystoreProperties.containsKey('storeFile') && keystoreProperties.containsKey('storePassword') &&
            keystoreProperties.containsKey('keyAlias') && keystoreProperties.containsKey('keyPassword')) {
        android.signingConfigs.releaseConfig.storeFile = file(keystoreProperties['storeFile'])
        android.signingConfigs.releaseConfig.storePassword = keystoreProperties['storePassword']
        android.signingConfigs.releaseConfig.keyAlias = keystoreProperties['keyAlias']
        android.signingConfigs.releaseConfig.keyPassword = keystoreProperties['keyPassword']
    } else {
        android.buildTypes.release.signingConfig = null
    }
} else {
    android.buildTypes.release.signingConfig = null
}

dexcount {
    format = "yaml"
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation "com.android.support:appcompat-v7:${libraries.supportVersion}"
    implementation "com.android.support:design:${libraries.supportVersion}"
    implementation "com.android.support.constraint:constraint-layout:${libraries.constraint_layout}"

    implementation "com.jakewharton.timber:timber:${libraries.timber}"

    implementation "com.google.code.gson:gson:${libraries.gson}"
    annotationProcessor "com.ryanharter.auto.value:auto-value-gson:${libraries.auto_value_gson}"
    compileOnly "com.ryanharter.auto.value:auto-value-gson:${libraries.auto_value_gson}"

    // EventBus
    implementation "org.greenrobot:eventbus:${libraries.eventbus}"
    annotationProcessor "org.greenrobot:eventbus-annotation-processor:${libraries.eventbus_annotation_processor}"

    // ButterKnife
    implementation "com.jakewharton:butterknife:${libraries.butterknife}"
    annotationProcessor "com.jakewharton:butterknife-compiler:${libraries.butterknife}"

    // Retrofit
    implementation "com.squareup.retrofit2:retrofit:${libraries.retrofit}"
    implementation "com.squareup.retrofit2:converter-gson:${libraries.retrofit}"
    implementation "com.squareup.retrofit2:adapter-rxjava2:${libraries.retrofit}"
    implementation "com.squareup.okhttp3:okhttp:${libraries.okhttp3}"
    implementation "com.squareup.okhttp3:logging-interceptor:${libraries.okhttp3}"

    // RxJava
    implementation "io.reactivex.rxjava2:rxandroid:${libraries.rxandroid}"
    implementation "io.reactivex.rxjava2:rxjava:${libraries.rxjava}"

    implementation "com.tbruyelle.rxpermissions2:rxpermissions:${libraries.rxpermissions}"

    // LeakCanary
    debugImplementation "com.squareup.leakcanary:leakcanary-android:${libraries.leakcanary}"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:${libraries.leakcanary}"
    testImplementation "com.squareup.leakcanary:leakcanary-android-no-op:${libraries.leakcanary}"

    // Stetho
    debugImplementation "com.facebook.stetho:stetho:${libraries.stetho}"
    debugImplementation "com.facebook.stetho:stetho-okhttp3:${libraries.stetho}"

    // Dependencies for local unit tests
    testImplementation "junit:junit:${libraries.junit}"
    testImplementation "org.mockito:mockito-core:${libraries.mockito}"
    testImplementation "org.hamcrest:hamcrest-all:${libraries.hamcrest}"
    testImplementation "org.assertj:assertj-core:${libraries.assertj}"
    androidTestImplementation "org.mockito:mockito-android:${libraries.mockito}"

    // Android Testing Support Library
    androidTestImplementation "com.android.support.test:runner:${libraries.testrunner}"
    androidTestImplementation "com.android.support.test:rules:${libraries.testrunner}"
    androidTestImplementation "com.android.support.test.espresso:espresso-core:${libraries.espresso}"
    androidTestImplementation "com.android.support.test.espresso:espresso-contrib:${libraries.espresso}"
    androidTestImplementation "com.android.support.test.espresso:espresso-idling-resource:${libraries.espresso}"
    androidTestImplementation "com.android.support.test.espresso:espresso-intents:${libraries.espresso}"
}

/*
Resolves dependency versions across test and production APKs, specifically, transitive
dependencies. This is required since Espresso internally has a dependency on support-annotations.
*/
configurations.all {
    resolutionStrategy.force "com.android.support:support-annotations:${libraries.supportVersion}"
}