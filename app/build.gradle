apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'com.getkeepsafe.dexcount'

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.0"

    defaultConfig {
        applicationId "com.yichiuan.weatherapp"
        minSdkVersion 16
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
    }
    signingConfigs {
        releaseConfig
    }
    buildTypes {
        debug {
            minifyEnabled true
            // Uses new built-in shrinker http://tools.android.com/tech-docs/new-build-system/built-in-shrinker
            useProguard false

            applicationIdSuffix '.debug'
            versionNameSuffix '-debug'

            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        staging.initWith(buildTypes.debug)
        staging {
            //使得 Proguard 有作用
            debuggable false
            useProguard true
            applicationIdSuffix '.staging'
            versionNameSuffix '-staging'
        }
        release {
            minifyEnabled true
            //proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //Use Proguard optimization
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.releaseConfig
        }
    }

    // If you need to add more flavors, consider using flavor dimensions.
    productFlavors {
        mock {
            applicationIdSuffix = ".mock"
        }
        prod {

        }
    }

    // Remove mockRelease as it's not needed.
    android.variantFilter { variant ->
        if(variant.buildType.name.equals('release')
                && variant.getFlavors().get(0).name.equals('mock')) {
            variant.setIgnore(true);
        }
    }

    // Always show the result of every unit test, even if it passes.
    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

def keystorePropertiesFile = rootProject.file("keystore.properties")

def keystoreProperties = new Properties()

if (keystorePropertiesFile.canRead()) {
    // Load your keystore.properties file into the keystoreProperties object.
    // keystore.properties contains
    //    storeFile=locationOfstoreFile
    //    storePassword=storePassword
    //    keyPassword=keyPassword
    //    keyAlias=keyAlias
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

    android.signingConfigs.releaseConfig.storeFile file(keystoreProperties['storeFile'])
    android.signingConfigs.releaseConfig.storePassword keystoreProperties['storePassword']
    android.signingConfigs.releaseConfig.keyAlias keystoreProperties['keyAlias']
    android.signingConfigs.releaseConfig.keyPassword keystoreProperties['keyPassword']
}

apt {
    arguments {
        eventBusIndex "com.yichiuan.weatherapp.EventBusIndex"
    }
}

dexcount {
    format = "yaml"
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    compile "com.android.support:appcompat-v7:${libraries.supportVersion}"
    compile "com.android.support:design:${libraries.supportVersion}"
    compile 'com.android.support.constraint:constraint-layout:1.0.0-beta3'

    compile 'com.jakewharton.timber:timber:4.3.1'

    compile "com.google.code.gson:gson:${libraries.gson}"

    // EventBus
    compile 'org.greenrobot:eventbus:3.0.0'
    apt 'org.greenrobot:eventbus-annotation-processor:3.0.1'

    // ButterKnife
    compile "com.jakewharton:butterknife:${libraries.butterknife}"
    apt "com.jakewharton:butterknife-compiler:${libraries.butterknife}"

    // Retrofit
    compile "com.squareup.retrofit2:retrofit:${libraries.retrofit}"
    compile "com.squareup.retrofit2:converter-gson:${libraries.retrofit}"
    compile "com.squareup.retrofit2:adapter-rxjava:${libraries.retrofit}"
    compile "com.squareup.okhttp3:okhttp:${libraries.okhttp3}"
    compile "com.squareup.okhttp3:logging-interceptor:${libraries.okhttp3}"

    // RxJava
    compile 'io.reactivex:rxandroid:1.2.1'
    compile 'io.reactivex:rxjava:1.2.2'

    // LeakCanary
    debugCompile "com.squareup.leakcanary:leakcanary-android:${libraries.leakcanary}"
    releaseCompile "com.squareup.leakcanary:leakcanary-android-no-op:${libraries.leakcanary}"
    testCompile "com.squareup.leakcanary:leakcanary-android-no-op:${libraries.leakcanary}"

    // Stetho
    compile "com.facebook.stetho:stetho:${libraries.stetho}"
    compile "com.facebook.stetho:stetho-okhttp3:${libraries.stetho}"

    // Dependencies for local unit tests
    testCompile 'junit:junit:4.12'
    testCompile "org.mockito:mockito-core:2.2.15"
    testCompile 'org.hamcrest:hamcrest-all:1.3'

    androidTestCompile 'org.mockito:mockito-core:2.2.15'
    androidTestCompile 'com.github.blueapron:dexmaker:2.0'

    // Android Testing Support Library
    androidTestCompile "com.android.support.test:runner:${libraries.testrunner}"
    androidTestCompile "com.android.support.test:rules:${libraries.testrunner}"
    androidTestCompile "com.android.support.test.espresso:espresso-core:${libraries.espresso}"
    androidTestCompile ("com.android.support.test.espresso:espresso-contrib:${libraries.espresso}") {
        exclude module: 'recyclerview-v7'
        exclude module: 'design'
        exclude module: 'support-v4'
    }
    androidTestCompile "com.android.support.test.espresso:espresso-idling-resource:${libraries.espresso}"
    androidTestCompile "com.android.support.test.espresso:espresso-intents:${libraries.espresso}"
}

/*
Resolves dependency versions across test and production APKs, specifically, transitive
dependencies. This is required since Espresso internally has a dependency on support-annotations.
*/
configurations.all {
    resolutionStrategy.force "com.android.support:support-annotations:${libraries.supportVersion}"
}